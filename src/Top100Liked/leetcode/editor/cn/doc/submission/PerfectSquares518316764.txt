    class Solution {
        public int numSquares(int n) {
            List<Integer> list = new ArrayList<>();
            int idx = 1;
            while (idx * idx <= n) {
                list.add(idx * idx);
                idx++;
            }
            int size = list.size();
            int first = list.getFirst();
            int[][] dp = new int[size][n + 1];
            for (int i = 0; i <= n; i++) {
                if (i % first == 0) {
                    dp[0][i] = i / first;
                } else {
                    dp[0][i] = Integer.MAX_VALUE;
                }
            }
            for (int i = 1; i < size; i++) {
                int t = list.get(i);
                for (int j = 0; j <= n; j++) {
                    dp[i][j] = dp[i - 1][j];
                    for (int k = 1; k * t <= j; k++) {
                        if (dp[i - 1][j - k * t] != Integer.MAX_VALUE) {
                            dp[i][j] = Math.min(dp[i - 1][j - k * t] + k, dp[i][j]);
                        } else {
                            dp[i][j] = dp[i - 1][j];
                        }
                    }
                }
            }
            return dp[size - 1][n] == Integer.MAX_VALUE ? -1 : dp[size - 1][n];
        }

        private int dfs(int n) {
            if (n == 0) {
                return 0;
            }
            int res = Integer.MAX_VALUE;
            for (int i = 1; i * i <= n; i++) {
                res = Math.min(res, dfs(n - i * i) + 1);
            }
            return res;
        }
    }


//runtime:1501 ms
//memory:53.5 MB

    class Solution {
        public int numIslands(char[][] grid) {
            int ans = 0;
            int row = grid.length, col = grid[0].length;
            boolean[][] visited = new boolean[row][col];
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < col; j++) {
                    if (grid[i][j] == '1') {
                        dfs(grid, i, j);
                        ans++;
                    }
                }
            }
            return ans;
        }

        private void dfs(char[][] grid, int row, int col) {
            if (!inArea(grid, row, col) || grid[row][col] == '0') {
                return;
            }
            grid[row][col] = '0';
            dfs(grid, row - 1, col);
            dfs(grid, row + 1, col);
            dfs(grid, row, col - 1);
            dfs(grid, row, col + 1);
        }


        private boolean inArea(char[][] grid, int i, int j) {
            return 0 <= i && i < grid.length && 0 <= j && j < grid[0].length;
        }
    }

//runtime:3 ms
//memory:48.2 MB

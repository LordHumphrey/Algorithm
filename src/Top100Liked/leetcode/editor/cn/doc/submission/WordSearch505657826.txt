    class Solution {
        private final int[][] DIRECTION = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
        private int totalRow;
        private int totalCol;

        public boolean exist(char[][] board, String word) {
            totalRow = board.length;
            totalCol = board[0].length;
            for (int i = 0; i < board.length; i++) {
                for (int i1 = 0; i1 < board[0].length; i1++) {
                    if (dfs(board, word, i, i1, 0, new boolean[board.length][board[0].length])) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean dfs(char[][] board, String word, int row, int col, int wordPos, boolean[][] used) {
            if (board[row][col] != word.charAt(wordPos)) {
                return false;
            }
            if (wordPos == word.length() - 1) {
                return true;
            }

            used[row][col] = true;
            for (int[] ints : DIRECTION) {
                int tempRow = row + ints[0], tempCol = col + ints[1];
                if (isValidIndex(tempRow, tempCol)
                        && !used[tempRow][tempCol]
                        && board[tempRow][tempCol] == word.charAt(wordPos + 1)) {
                    if (dfs(board, word, tempRow, tempCol, wordPos + 1, used)) {
                        return true;
                    }
                }
            }
            used[row][col] = false;
            return false;
        }

        private boolean isValidIndex(int row, int col) {
            return row >= 0 && col >= 0 && row < totalRow && col < totalCol;
        }
    }

//runtime:178 ms
//memory:40.9 MB

    class Solution {
        public boolean canJump(int[] nums) {
            if (nums == null || nums.length == 0) {
                return true;
            }
            int maxPos = 0;
            for (int i = 0; i < nums.length; i++) {
                if (maxPos >= i) {
                    maxPos = Math.max(i + nums[i], maxPos);
                }
            }
            return maxPos >= nums.length - 1;
        }

        private boolean dfs(int index, int[] nums, Map<Integer, Boolean> cache) {
            if (index >= nums.length - 1) {
                return true;
            }
            if (cache.containsKey(index)) {
                return cache.get(index);
            }
            for (int i = 1; i <= nums[index]; ++i) {
                if (dfs(i + index, nums, cache)) {
                    cache.put((i + index), Boolean.TRUE);
                    return true;
                }
            }
            cache.put(index, Boolean.FALSE);
            return false;
        }
    }


//runtime:2 ms
//memory:44.4 MB

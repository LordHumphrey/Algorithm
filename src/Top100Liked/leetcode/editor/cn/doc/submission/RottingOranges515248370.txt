    class Solution {
        public int orangesRotting(int[][] grid) {
            Deque<int[]> stack = new ArrayDeque<>();
            int row = grid.length;
            int col = grid[0].length;
            int fresh = 0;
            for (int i = 0; i < row; i++) {
                for (int i1 = 0; i1 < col; i1++) {
                    if (grid[i][i1] == 2) {
                        stack.push(new int[] {i, i1});
                    } else if (grid[i][i1] == 1) {
                        fresh++;
                    }
                }
            }
            int ans = 0;
            int[][] pos = new int[][] {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
            while (!stack.isEmpty() && fresh > 0) {
                ans++;
                int size = stack.size();
                for (int i = 0; i < size; i++) {
                    int[] pop = stack.pollFirst();
                    int rNew = pop[0];
                    int cNew = pop[1];
                    for (int[] po : pos) {
                        int rPos = rNew + po[0];
                        int cPos = cNew + po[1];
                        if (rPos >= 0 && rPos < row && cPos >= 0 && cPos < col && grid[rPos][cPos] == 1) {
                            grid[rPos][cPos] = 2;
                            stack.add(new int[] {rPos, cPos});
                            fresh--;
                        }
                    }
                }
            }
            return fresh == 0 ? ans : -1;
        }
    }

//runtime:1 ms
//memory:41.2 MB

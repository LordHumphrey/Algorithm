    class Solution {
        public int search(int[] nums, int target) {
            if (nums.length == 1) {
                return nums[0] == target ? 0 : -1;
            }
            int min = findMin(nums, 0, nums.length - 1);
            if (target < nums[nums.length - 1]) {
                return findTarget(nums, min, nums.length - 1, target);
            } else if (target > nums[nums.length - 1]) {
                return findTarget(nums, 0, min, target);
            } else if (nums[nums.length - 1] == target) {
                return nums.length - 1;
            }
            return -1;
        }

        private int findTarget(int[] nums, int left, int right, int target) {
            int mid = 0;
            while (left <= right) {
                mid = left + (right - left) / 2;
                if (nums[mid] > target) {
                    right = mid - 1;
                } else if (nums[mid] < target) {
                    left = mid + 1;
                } else if (nums[mid] == target) {
                    return mid;
                }
            }
            return -1;
        }

        private int findMin(int[] nums, int left, int right) {
            int mid = 0;
            while (left <= right) {
                mid = left + (right - left) / 2;
                if (nums[mid] > nums[right]) {
                    left = mid + 1;
                } else if (nums[mid] < nums[right]) {
                    right = mid;
                } else {
                    break;
                }
            }
            return right;
        }
    }

//runtime:0 ms
//memory:41.1 MB

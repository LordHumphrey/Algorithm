    class Solution {
        public List<List<Integer>> permute(int[] nums) {
            List<List<Integer>> res = new ArrayList<>();
            dfs(nums, 0, res, new boolean[nums.length], new ArrayDeque<>());
            return res;
        }

        private void dfs(int[] nums, int start, List<List<Integer>> res, boolean[] used, Deque<Integer> path) {
            if (path.size() == nums.length) {
                res.add(new ArrayList<>(path));
                return;
            }
            for (int i = 0; i < nums.length; i++) {
                if (!used[i]) {
                    path.addLast(nums[i]);
                    used[i] = true;
                    dfs(nums, i + 1, res, used, path);
                    used[i] = false;
                    path.removeLast();
                }
            }
        }
    }

//runtime:1 ms
//memory:43.7 MB

    class Solution {
        public int[] topKFrequent(int[] nums, int k) {
            int length = nums.length;
            Map<Integer, Integer> map = new HashMap<>();
            for (int num : nums) {
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
            Deque<Integer> stack = new ArrayDeque<>();
            Deque<Integer> minStack = new ArrayDeque<>();
            for (Map.Entry<Integer, Integer> integerIntegerEntry : map.entrySet()) {
                Integer key = integerIntegerEntry.getKey();
                Integer value = integerIntegerEntry.getValue();
                if (minStack.size() < k) {
                    minStack.push(key);
                } else if (map.get(minStack.peek()) < value) {
                    minStack.removeFirst();
                    minStack.addFirst(key);

                }
            }
            return minStack.stream().mapToInt(i -> i).toArray();
        }
    }

//total_testcases:21
//total_correct:12
//input_formatted:[5,2,5,3,5,3,1,1,3]
2
//expected_output:[3,5]
//code_output:[3,1]
//last_testcase:[5,2,5,3,5,3,1,1,3]
2

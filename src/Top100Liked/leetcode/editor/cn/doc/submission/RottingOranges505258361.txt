    class Solution {
        public int orangesRotting(int[][] grid) {
            int fresh = 0, row = grid.length, col = grid[0].length;
            Deque<int[]> deque = new ArrayDeque<>();
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < col; j++) {
                    if (grid[i][j] == 2) {
                        deque.addLast(new int[] {i, j});
                    } else if (grid[i][j] == 1) {
                        fresh++;
                    }
                }
            }
            int round = 0;
            while (!deque.isEmpty() && fresh > 0) {
                round++;
                int size = deque.size();
                for (int i = 0; i < size; i++) {
                    int[] point = deque.pollFirst();
                    int r = point[0], c = point[1];
                    if (r - 1 >= 0 && grid[r - 1][c] == 1) {
                        grid[r - 1][c] = 2;
                        fresh--;
                        deque.addLast(new int[] {r - 1, c});
                    }
                    if (r + 1 < row && grid[r + 1][c] == 1) {
                        grid[r + 1][c] = 2;
                        fresh--;
                        deque.addLast(new int[] {r + 1, c});
                    }
                    if (c - 1 >= 0 && grid[r][c - 1] == 1) {
                        grid[r][c - 1] = 2;
                        fresh--;
                        deque.addLast(new int[] {r, c - 1});
                    }
                    if (c + 1 < col && grid[r][c + 1] == 1) {
                        grid[r][c + 1] = 2;
                        fresh--;
                        deque.addLast(new int[] {r, c + 1});
                    }
                }
            }
            return fresh == 0 ? round : -1;
        }
    }

//runtime:1 ms
//memory:41.2 MB

    class Solution {
        public int[] topKFrequent(int[] nums, int k) {
            HashMap<Integer, Integer> hashMap = new HashMap<>(k);
            PriorityQueue<Integer> queue = new PriorityQueue<>(k, new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    return hashMap.get(o1) - hashMap.get(o2);
                }
            });
            for (int i = 0; i < nums.length; i++) {
                hashMap.put(nums[i], hashMap.getOrDefault(nums[i], 0) + 1);
            }
            for (Integer i : hashMap.keySet()) {
                if (queue.size() < k) {
                    queue.add(i);
                } else if (hashMap.get(queue.peek()) < hashMap.get(i)) {
                    queue.poll();
                    queue.add(i);
                }
            }
            int[] res = new int[k];
            int idx = 0;
            while (!queue.isEmpty()) {
                res[idx] = queue.poll();
                idx++;
            }
            return res;
        }
    }

//runtime:13 ms
//memory:44.5 MB

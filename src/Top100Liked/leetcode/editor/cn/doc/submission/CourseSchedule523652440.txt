    class Solution {
        public boolean canFinish(int numCourses, int[][] prerequisites) {
            int[] inDegree = new int[numCourses];
            List<List<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < numCourses; i++) {
                adj.add(new ArrayList<>());
            }
            for (int[] prerequisite : prerequisites) {
                inDegree[prerequisite[0]]++;
                adj.get(prerequisite[1]).add(prerequisite[0]);
            }
            Deque<Integer> queue = new ArrayDeque<>();
            for (int i = 0; i < inDegree.length; i++) {
                if (inDegree[i] == 0) {
                    queue.addLast(i);
                }
            }
            while (!queue.isEmpty()) {
                int first = queue.removeFirst();
                numCourses--;
                for (Integer i : adj.get(first)) {
                    inDegree[i]--;
                    if (inDegree[i] == 0) {
                        queue.addLast(i);
                    }
                }
            }
            return numCourses == 0;
        }
    }

//runtime:5 ms
//memory:43.2 MB

    class Solution {
        public int minDistance(String word1, String word2) {
            int len1 = word1.length(), len2 = word2.length();
            int[][] dp = new int[len1 + 1][len2 + 1];
            for (int i = 0; i <= len1; i++) {
                dp[i][0] = i;
            }
            for (int i = 0; i <= len2; i++) {
                dp[0][i] = i;
            }
            for (int i = 1; i <= len1; i++) {
                for (int i1 = 1; i1 <= len2; i1++) {
                    if (word1.charAt(i - 1) == word2.charAt(i1 - 1)) {
                        dp[i][i1] = dp[i - 1][i1 - 1];
                    } else {
                        dp[i][i1] = Math.min(Math.min(dp[i][i1 - 1], dp[i - 1][i1]), dp[i - 1][i1 - 1]) + 1;
                    }
                }
            }
            return dp[len1][len2];
        }
    }

//runtime:4 ms
//memory:44 MB

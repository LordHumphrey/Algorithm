
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeKLists(ListNode[] lists) {
            if (null == lists || lists.length == 0) {
                return null;
            }
            return mergeKListsDfs(lists, 0, lists.length);
        }

        private ListNode mergeKListsDfs(ListNode[] lists, int start, int end) {
            int arrLen = end - start;
            if (arrLen == 0) {
                return null;
            }
            if (arrLen == 1) {
                return lists[start];
            }
            int mid = start + arrLen / 2;
            ListNode left = mergeKListsDfs(lists, start, mid);
            ListNode right = mergeKListsDfs(lists, mid, end);
            return merge2Lists(left, right);
        }

        private ListNode merge2Lists(ListNode list1, ListNode list2) {
            ListNode head = new ListNode(), dummy = head;
            while (list1 != null && list2 != null) {
                if (list1.val > list2.val) {
                    dummy.next = list2;
                    list2 = list2.next;
                } else {
                    dummy.next = list1;
                    list1 = list1.next;
                }
                dummy = dummy.next;
            }
            if (list1 != null) {
                dummy.next = list1;
            }
            if (list2 != null) {
                dummy.next = list2;
            }
            return head.next;
        }
    }


//runtime:1 ms
//memory:43.5 MB

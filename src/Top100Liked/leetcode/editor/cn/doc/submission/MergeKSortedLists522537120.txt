
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeKLists(ListNode[] lists) {
            if (null == lists || lists.length == 0) {
                return null;
            }
            ListNode res = new ListNode(0), dummyNode = res;
            for (ListNode list : lists) {
                if (null != list) {
                    dummyNode.next = merge2Lists(dummyNode.next, list);
                }
            }
            return res.next;
        }

        private ListNode merge2Lists(ListNode list1, ListNode list2) {
            ListNode res = new ListNode(), dummyNode = res;
            while (list1 != null && list2 != null) {
                if (list1.val < list2.val) {
                    dummyNode.next = list1;
                    list1 = list1.next;
                } else {
                    dummyNode.next = list2;
                    list2 = list2.next;
                }
                dummyNode = dummyNode.next;
            }
            if (list1 != null) {
                dummyNode.next = list1;
            }
            if (list2 != null) {
                dummyNode.next = list2;
            }
            return res.next;
        }

    }

//runtime:99 ms
//memory:43.3 MB


    class Solution {
        public void nextPermutation(int[] nums) {
            int length = nums.length;
            if (length <= 1) {
                return;
            }
            int m = length - 1;
            while (m > 0 && nums[m] <= nums[m - 1]) {
                m--;
            }
            if (0 == m) {
                reverse(nums, 0, length - 1);
            } else {
                int n = m;
                while (n < length && nums[n] > nums[m - 1]) {
                    n++;
                }
                System.out.print(m + " nums[m] " + nums[m]);
                System.out.println(n - 1 + " nums[n-1] " + nums[n - 1]);
                swap(nums, n - 1, m - 1);
                reverse(nums, m, length - 1);
            }
        }

        private void reverse(int[] nums, int start, int end) {
            while (start < end) {
                swap(nums, start, end);
                start++;
                end--;
            }
        }

        private void swap(int[] nums, int i, int j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }
    }


//runtime:10 ms
//memory:42.6 MB

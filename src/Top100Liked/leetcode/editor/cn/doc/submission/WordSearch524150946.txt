    class Solution {
        private int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        private int m, n;

        public boolean exist(char[][] board, String word) {
            m = board.length;
            n = board[0].length;
            boolean[][] used = new boolean[m][n];
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (dfsSearch(board, 0, i, j, used, word)) {
                        return true;
                    }
                }
            }
            return false;
        }

        private boolean dfsSearch(char[][] board, int pos, int row, int col, boolean[][] used, String word) {
            if (pos == word.length() - 1) {
                return board[row][col] == word.charAt(pos);
            }
            if (board[row][col] == word.charAt(pos)) {
                used[row][col] = true;
                for (int[] direction : directions) {
                    int newX = row + direction[0];
                    int newY = col + direction[1];
                    if (inArea(newX, newY) && !used[newX][newY]) {
                        if (dfsSearch(board, pos + 1, newX, newY, used, word)) {
                            return true;
                        }
                    }
                }
                used[row][col] = false;
            }
            return false;
        }

        private boolean inArea(int x, int y) {
            return x >= 0 && x < m && y >= 0 && y < n;
        }
    }

//runtime:183 ms
//memory:40.8 MB

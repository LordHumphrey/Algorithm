    class Solution {
        public List<String> generateParenthesis(int n) {
            List<String> ans = new ArrayList<>();
            dfs(n, new StringBuilder(), 0, 0, ans);
            return ans;
        }

        private void dfs(int n, StringBuilder sb, int left, int right, List<String> ans) {
            if (sb.length() == 2 * n) {
                ans.add(sb.toString());
                return;
            }
            if (left < n) {
                sb.append("(");
                dfs(n, sb, left + 1, right, ans);
                sb.deleteCharAt(sb.length() - 1);
            }
            if (right < left) {
                sb.append(")");
                dfs(n, sb, left, right + 1, ans);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
    }

//runtime:1 ms
//memory:41.9 MB
